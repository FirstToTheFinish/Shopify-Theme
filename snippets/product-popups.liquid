.{%- liquid
  assign popups = section.blocks | where: 'type', 'pop-up'
  assign show_size_chart = false
  assign dynamic_chart = product.metafields.custom.size_chart | downcase
  assign size_chart = section.blocks | where: 'type', 'variant-picker' | first
  if size_chart and size_chart.settings.enable_size_chart and size_chart.settings.size_chart_page != blank
    assign show_size_chart = true
  elsif dynamic_chart != blank
    assign show_size_chart = true
  endif
  assign show_request_pricing = product.metafields.custom.request_pricing

-%}

{%- if popups.size > 0 or show_size_chart or show_request_pricing -%}
  <link rel="stylesheet" href="{{ 'modal.css' | asset_url }}">

  {%- if popups.size > 0 -%}
    {%- for block in popups -%}
      <modal-dialog class="modal fixed top-0 left-0 w-full h-full flex items-center justify-center" id="modal-{{ block.id }}" {{ block.shopify_attributes }}>
        <div class="modal__window relative bg-theme-bg text-theme-text text-start overflow-hidden has-motion" role="dialog" aria-label="{{ block.settings.link_text }}" aria-modal="true" tabindex="-1">
          <button type="button" class="modal__close-btn absolute js-close-modal">
            {% render 'icon-close' %}
            <span class="visually-hidden">{{ 'accessibility.close' | t }}</span>
          </button>
          <div class="modal__content flex-auto h-full rte">
            {%- if block.settings.page != blank -%}
              <h1 class="h2">{{ block.settings.page.title }}</h1>
            {%- endif -%}
            {{ block.settings.text }}
            {{ block.settings.page.content }}
          </div>
        </div>
      </modal-dialog>
    {%- endfor -%}
  {%- endif -%}

  {%- if show_size_chart -%}
    <modal-dialog class="modal invisible fixed top-0 left-0 w-full h-full flex items-center justify-center" id="size-chart">
      <div class="modal__window relative bg-theme-bg text-theme-text text-start overflow-hidden has-motion" role="dialog" aria-label="Size Chart" aria-modal="true" tabindex="-1">
        <button type="button" class="modal__close-btn absolute js-close-modal">
          {% render 'icon-close' %}
          <span class="visually-hidden">{{ 'accessibility.close' | t }}</span>
        </button>
        <div class="modal__content flex-auto h-full rte">
          {% case dynamic_chart %}
            {% when 'shoes' %}{% render 'sizing-chart-shoes' %}
            {% when 'apparel' %}{% render 'sizing-chart-apparel' %}
            {% when 'compression singlet' %}{% render 'sizing-chart-compression-singlet' %}
            {% when 'loose fit singlet' %}{% render 'sizing-chart-loose-fit-singlet' %}
            {% when 'fitted singlet' %}{% render 'sizing-chart-fitted-singlet' %}
            {% when 'fitted zip singlet' %}{% render 'sizing-chart-fitted-zip-singlet' %}
            {% when 'zipped speedsuit' %}{% render 'sizing-chart-zip-speedsuit' %}
            {% when 'crop top' %}{% render 'sizing-chart-crop-top' %}
            {% when 'thrower tee' %}{% render 'sizing-chart-thrower-tee' %}
            {% when 'thrower short' %}{% render 'sizing-chart-thrower-short' %}
            {% when 'track short' %}{% render 'sizing-chart-track-short' %}
            {% when 'split short' %}{% render 'sizing-chart-split-short' %}
            {% when 'compression short' %}{% render 'sizing-chart-compression-short' %}
            {% when 'fttf football jersey' %}{% render 'sizing-chart-fttf-fb-jersey' %}
            {% when 'shotput' %}{% render 'sizing-chart-shotput' %}
            {% when 'discus' %}{% render 'sizing-chart-discus' %}
            {% when 'wrestling singlet' %}{% render 'sizing-chart-wrestling-singlet' %}
            {% when 'goalie jersey' %}{% render 'sizing-chart-goalie-jersey' %}
            {% when 'long sleeve soccer jersey' %}{% render 'sizing-chart-ls-soccer-jersey' %}
            {% when 'soccer jersey' %}{% render 'sizing-chart-soccer-jersey' %}
            {% when 'soccer short' %}{% render 'sizing-chart-soccer-short' %}
            {% when 'football pants' %}{% render 'sizing-chart-football-pant' %}
            {% when 'short sleeve volleyball jersey' %}{% render 'sizing-chart-ss-vb-jersey' %}
            {% when 'long sleeve volleyball jersey' %}{% render 'sizing-chart-ls-vb-jersey' %}
            {% when 'cap sleeve volleyball jersey' %}{% render 'sizing-chart-cap-sleeve-vb-jersey' %}
            {% when 'sleeveless volleyball jersey' %}{% render 'sizing-chart-sleeveless-vb-jersey' %}
            {% when '2.5" volleyball short' %}{% render 'sizing-chart-2.5-vb-short' %}
            {% when '4" volleyball short' %}{% render 'sizing-chart-4-vb-short' %}
            {% when 'volleyball game short' %}{% render 'sizing-chart-vb-game-short' %}
            {% else %}<p>No sizing chart available for this product.</p>
          {% endcase %}
        </div>
      </div>
    </modal-dialog>
  {%- endif -%}

  {%- if show_request_pricing -%}
    <modal-dialog class="modal invisible fixed top-0 left-0 w-full h-full flex items-center justify-center" id="globo-form-modal">
      <div class="modal__window relative bg-theme-bg text-theme-text text-start overflow-hidden has-motion" role="dialog" aria-label="Request Pricing" aria-modal="true" tabindex="-1">
        <button type="button" class="modal__close-btn absolute js-close-modal">
          {% render 'icon-close' %}
          <span class="visually-hidden">{{ 'accessibility.close' | t }}</span>
        </button>
        <div class="modal__content flex-auto h-full rte">
          <div class="globo-formbuilder" data-id="OTMwMjI="></div>
        </div>
      </div>
    </modal-dialog>
  {%- endif -%}
{%- endif -%}

  
<script>
  function cleanAndWrapSizeChartTables() {
    const modalContent = document.querySelector('#size-chart .modal__content');
    if (!modalContent) return;

    // 1. Unwrap all existing .scrollable-table wrappers
    modalContent.querySelectorAll('.scrollable-table').forEach((wrapper) => {
      while (wrapper.firstChild) {
        wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
      }
      wrapper.remove();
    });

    // 2. Wrap each table once
    modalContent.querySelectorAll('table').forEach((table) => {
      if (!table.parentElement.classList.contains('scrollable-table')) {
        const wrapper = document.createElement('div');
        wrapper.className = 'scrollable-table';
        table.parentNode.insertBefore(wrapper, table);
        wrapper.appendChild(table);
      }
    });
  }

  // Run the cleanup and wrap on modal open
  document.querySelectorAll('modal-opener[data-modal="size-chart"]').forEach((opener) => {
    opener.addEventListener('click', () => {
      setTimeout(cleanAndWrapSizeChartTables, 50); // slight delay ensures modal DOM is rendered
    });
  });
  
  document.addEventListener("DOMContentLoaded", function () {
    const waitForFields = setInterval(function () {
      const skuSpan = document.querySelector('.product-sku__value');
      const itemInput = document.querySelector('input[name="text-2"]');
    
      function updateSKUInForm() {
        if (skuSpan && itemInput) {
          itemInput.value = skuSpan.textContent.trim();
          clearInterval(waitForFields);
        }
      }
    
      if (skuSpan && itemInput) {
        // Initial update
        updateSKUInForm();
    
        // Watch for changes to the SKU span's content
        const observer = new MutationObserver(() => {
          updateSKUInForm();
        });
    
        observer.observe(skuSpan, { characterData: true, childList: true, subtree: true });
      }
    }, 100); // checks every 100ms
  });

  document.addEventListener("DOMContentLoaded", function () {
    const waitForFields = setInterval(function () {
      const observer = new MutationObserver(() => {
      const footer = document.querySelector(".gfb__footer");
      const resetButton = footer?.querySelector('button.reset');
      const previousButton = footer?.querySelector('button.previous');

      if (footer && resetButton && previousButton && previousButton.previousSibling !== resetButton) {
        footer.insertBefore(resetButton, previousButton);
      }
    });

    const footerContainer = document.querySelector(".gfb__footer");

    if (footerContainer) {
      observer.observe(footerContainer, {
        childList: true,
        subtree: true
      });

      // Also move it immediately if already rendered
      const resetButton = footerContainer.querySelector('button.reset');
      const previousButton = footerContainer.querySelector('button.previous');
      if (resetButton && previousButton && previousButton.previousSibling !== resetButton) {
        footerContainer.insertBefore(resetButton, previousButton);
      }
    }
    }, 100); // checks every 100ms
  });


</script>